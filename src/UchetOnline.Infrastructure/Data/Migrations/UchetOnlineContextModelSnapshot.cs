// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UchetOnline.Infrastructure.Data;

#nullable disable

namespace UchetOnline.Infrastructure.Data.Migrations
{
    [DbContext(typeof(UchetOnlineContext))]
    partial class UchetOnlineContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("UchetOnline.Domain.Entities.AccountingEntry", b =>
            {
                b.Property<Guid>("Id")
                    .HasColumnType("uuid");

                b.Property<decimal>("Amount")
                    .HasPrecision(18, 2)
                    .HasColumnType("numeric(18,2)");

                b.Property<string>("CreditAccount")
                    .IsRequired()
                    .HasMaxLength(32)
                    .HasColumnType("character varying(32)");

                b.Property<DateTime>("CreatedAtUtc")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("Currency")
                    .IsRequired()
                    .HasMaxLength(32)
                    .HasColumnType("character varying(32)");

                b.Property<byte[]>("ConcurrencyToken")
                    .IsConcurrencyToken()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("bytea");

                b.Property<string>("DebitAccount")
                    .IsRequired()
                    .HasMaxLength(32)
                    .HasColumnType("character varying(32)");

                b.Property<string>("DocumentNumber")
                    .IsRequired()
                    .HasMaxLength(64)
                    .HasColumnType("character varying(64)");

                b.Property<DateTime>("DocumentDate")
                    .HasColumnType("timestamp with time zone");

                b.Property<Guid?>("SourceDocumentId")
                    .HasColumnType("uuid");

                b.Property<DateTime?>("UpdatedAtUtc")
                    .HasColumnType("timestamp with time zone");

                b.HasKey("Id");

                b.ToTable("AccountingEntries");
            });

            modelBuilder.Entity("UchetOnline.Domain.Entities.AuditLog", b =>
            {
                b.Property<Guid>("Id")
                    .HasColumnType("uuid");

                b.Property<string>("ActionType")
                    .IsRequired()
                    .HasMaxLength(32)
                    .HasColumnType("character varying(32)");

                b.Property<byte[]>("ConcurrencyToken")
                    .IsConcurrencyToken()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("bytea");

                b.Property<DateTime>("CreatedAtUtc")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("Details")
                    .IsRequired()
                    .HasMaxLength(512)
                    .HasColumnType("character varying(512)");

                b.Property<DateTime?>("UpdatedAtUtc")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("UserName")
                    .IsRequired()
                    .HasMaxLength(64)
                    .HasColumnType("character varying(64)");

                b.HasKey("Id");

                b.ToTable("AuditLogs");
            });

            modelBuilder.Entity("UchetOnline.Domain.Entities.CatalogItem", b =>
            {
                b.Property<Guid>("Id")
                    .HasColumnType("uuid");

                b.Property<string>("Category")
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasColumnType("character varying(128)");

                b.Property<string>("Code")
                    .IsRequired()
                    .HasMaxLength(64)
                    .HasColumnType("character varying(64)");

                b.Property<byte[]>("ConcurrencyToken")
                    .IsConcurrencyToken()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("bytea");

                b.Property<DateTime>("CreatedAtUtc")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(256)
                    .HasColumnType("character varying(256)");

                b.Property<string>("UnitOfMeasure")
                    .IsRequired()
                    .HasMaxLength(32)
                    .HasColumnType("character varying(32)");

                b.Property<DateTime?>("UpdatedAtUtc")
                    .HasColumnType("timestamp with time zone");

                b.HasKey("Id");

                b.ToTable("CatalogItems");
            });

            modelBuilder.Entity("UchetOnline.Domain.Entities.ConstantValue", b =>
            {
                b.Property<Guid>("Id")
                    .HasColumnType("uuid");

                b.Property<string>("Code")
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasColumnType("character varying(128)");

                b.Property<byte[]>("ConcurrencyToken")
                    .IsConcurrencyToken()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("bytea");

                b.Property<DateTime>("CreatedAtUtc")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("Description")
                    .IsRequired()
                    .HasMaxLength(256)
                    .HasColumnType("character varying(256)");

                b.Property<string>("Value")
                    .IsRequired()
                    .HasMaxLength(512)
                    .HasColumnType("character varying(512)");

                b.Property<DateTime?>("UpdatedAtUtc")
                    .HasColumnType("timestamp with time zone");

                b.HasKey("Id");

                b.ToTable("Constants");
            });

            modelBuilder.Entity("UchetOnline.Domain.Entities.CrmLead", b =>
            {
                b.Property<Guid>("Id")
                    .HasColumnType("uuid");

                b.Property<string>("CompanyName")
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasColumnType("character varying(128)");

                b.Property<string>("ContactName")
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasColumnType("character varying(128)");

                b.Property<byte[]>("ConcurrencyToken")
                    .IsConcurrencyToken()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("bytea");

                b.Property<DateTime>("CreatedAtUtc")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("Email")
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasColumnType("character varying(128)");

                b.Property<string>("LeadSource")
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasColumnType("character varying(128)");

                b.Property<string>("Phone")
                    .IsRequired()
                    .HasMaxLength(32)
                    .HasColumnType("character varying(32)");

                b.Property<Guid?>("ResponsibleEmployeeId")
                    .HasColumnType("uuid");

                b.Property<DateTime?>("UpdatedAtUtc")
                    .HasColumnType("timestamp with time zone");

                b.HasKey("Id");

                b.HasIndex("ResponsibleEmployeeId");

                b.ToTable("CrmLeads");
            });

            modelBuilder.Entity("UchetOnline.Domain.Entities.Employee", b =>
            {
                b.Property<Guid>("Id")
                    .HasColumnType("uuid");

                b.Property<string>("FirstName")
                    .IsRequired()
                    .HasMaxLength(64)
                    .HasColumnType("character varying(64)");

                b.Property<string>("LastName")
                    .IsRequired()
                    .HasMaxLength(64)
                    .HasColumnType("character varying(64)");

                b.Property<string>("MiddleName")
                    .IsRequired()
                    .HasMaxLength(64)
                    .HasColumnType("character varying(64)");

                b.Property<byte[]>("ConcurrencyToken")
                    .IsConcurrencyToken()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("bytea");

                b.Property<DateTime>("CreatedAtUtc")
                    .HasColumnType("timestamp with time zone");

                b.Property<DateTime>("HireDate")
                    .HasColumnType("timestamp with time zone");

                b.Property<bool>("IsActive")
                    .HasColumnType("boolean");

                b.Property<string>("Position")
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasColumnType("character varying(128)");

                b.Property<DateTime?>("UpdatedAtUtc")
                    .HasColumnType("timestamp with time zone");

                b.HasKey("Id");

                b.ToTable("Employees");
            });

            modelBuilder.Entity("UchetOnline.Domain.Entities.ExchangePlan", b =>
            {
                b.Property<Guid>("Id")
                    .HasColumnType("uuid");

                b.Property<string>("CronExpression")
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasColumnType("character varying(128)");

                b.Property<byte[]>("ConcurrencyToken")
                    .IsConcurrencyToken()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("bytea");

                b.Property<DateTime>("CreatedAtUtc")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("Description")
                    .IsRequired()
                    .HasMaxLength(256)
                    .HasColumnType("character varying(256)");

                b.Property<DateTime?>("LastRunUtc")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasColumnType("character varying(128)");

                b.Property<DateTime?>("UpdatedAtUtc")
                    .HasColumnType("timestamp with time zone");

                b.HasKey("Id");

                b.ToTable("ExchangePlans");
            });

            modelBuilder.Entity("UchetOnline.Domain.Entities.IntegrationSettings", b =>
            {
                b.Property<Guid>("Id")
                    .HasColumnType("uuid");

                b.Property<string>("ApiKey")
                    .IsRequired()
                    .HasMaxLength(512)
                    .HasColumnType("character varying(512)");

                b.Property<byte[]>("ConcurrencyToken")
                    .IsConcurrencyToken()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("bytea");

                b.Property<DateTime>("CreatedAtUtc")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("Endpoint")
                    .IsRequired()
                    .HasMaxLength(512)
                    .HasColumnType("character varying(512)");

                b.Property<string>("IntegrationCode")
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasColumnType("character varying(128)");

                b.Property<bool>("IsEnabled")
                    .HasColumnType("boolean");

                b.Property<DateTime?>("UpdatedAtUtc")
                    .HasColumnType("timestamp with time zone");

                b.HasKey("Id");

                b.ToTable("IntegrationSettings");
            });

            modelBuilder.Entity("UchetOnline.Domain.Entities.InventoryItem", b =>
            {
                b.Property<Guid>("Id")
                    .HasColumnType("uuid");

                b.Property<Guid?>("CatalogItemId")
                    .HasColumnType("uuid");

                b.Property<byte[]>("ConcurrencyToken")
                    .IsConcurrencyToken()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("bytea");

                b.Property<DateTime>("CreatedAtUtc")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasColumnType("character varying(128)");

                b.Property<decimal>("Quantity")
                    .HasPrecision(18, 4)
                    .HasColumnType("numeric(18,4)");

                b.Property<decimal>("ReservedQuantity")
                    .HasPrecision(18, 4)
                    .HasColumnType("numeric(18,4)");

                b.Property<string>("Sku")
                    .IsRequired()
                    .HasMaxLength(64)
                    .HasColumnType("character varying(64)");

                b.Property<decimal>("UnitPrice")
                    .HasPrecision(18, 4)
                    .HasColumnType("numeric(18,4)");

                b.Property<DateTime?>("UpdatedAtUtc")
                    .HasColumnType("timestamp with time zone");

                b.Property<Guid>("WarehouseId")
                    .HasColumnType("uuid");

                b.HasKey("Id");

                b.HasIndex("CatalogItemId");

                b.HasIndex("WarehouseId", "Sku")
                    .IsUnique();

                b.ToTable("InventoryItems");
            });

            modelBuilder.Entity("UchetOnline.Domain.Entities.InventoryTransaction", b =>
            {
                b.Property<Guid>("Id")
                    .HasColumnType("uuid");

                b.Property<byte[]>("ConcurrencyToken")
                    .IsConcurrencyToken()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("bytea");

                b.Property<DateTime>("CreatedAtUtc")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("Comment")
                    .IsRequired()
                    .HasMaxLength(256)
                    .HasColumnType("character varying(256)");

                b.Property<Guid>("InventoryItemId")
                    .HasColumnType("uuid");

                b.Property<string>("OperationType")
                    .IsRequired()
                    .HasMaxLength(32)
                    .HasColumnType("character varying(32)");

                b.Property<Guid?>("RelatedDocumentId")
                    .HasColumnType("uuid");

                b.Property<DateTime?>("UpdatedAtUtc")
                    .HasColumnType("timestamp with time zone");

                b.Property<decimal>("Quantity")
                    .HasPrecision(18, 4)
                    .HasColumnType("numeric(18,4)");

                b.HasKey("Id");

                b.HasIndex("InventoryItemId");

                b.ToTable("InventoryTransactions");
            });

            modelBuilder.Entity("UchetOnline.Domain.Entities.ModuleDefinition", b =>
            {
                b.Property<Guid>("Id")
                    .HasColumnType("uuid");

                b.Property<string>("Code")
                    .IsRequired()
                    .HasMaxLength(64)
                    .HasColumnType("character varying(64)");

                b.Property<byte[]>("ConcurrencyToken")
                    .IsConcurrencyToken()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("bytea");

                b.Property<DateTime>("CreatedAtUtc")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("Description")
                    .IsRequired()
                    .HasMaxLength(256)
                    .HasColumnType("character varying(256)");

                b.Property<string>("Title")
                    .IsRequired()
                    .HasMaxLength(256)
                    .HasColumnType("character varying(256)");

                b.Property<DateTime?>("UpdatedAtUtc")
                    .HasColumnType("timestamp with time zone");

                b.HasKey("Id");

                b.ToTable("Modules");

                b.HasData(
                    new
                    {
                        Id = new Guid("00000000-0000-0000-0000-000000010001"),
                        Code = "inventory",
                        CreatedAtUtc = new DateTime(2024, 1, 1, 0, 0, 0, DateTimeKind.Utc),
                        Description = "Модуль Склад",
                        Title = "Склад"
                    },
                    new
                    {
                        Id = new Guid("00000000-0000-0000-0000-000000010002"),
                        Code = "accounting",
                        CreatedAtUtc = new DateTime(2024, 1, 1, 0, 0, 0, DateTimeKind.Utc),
                        Description = "Модуль Бухгалтерия",
                        Title = "Бухгалтерия"
                    },
                    new
                    {
                        Id = new Guid("00000000-0000-0000-0000-000000010003"),
                        Code = "sales",
                        CreatedAtUtc = new DateTime(2024, 1, 1, 0, 0, 0, DateTimeKind.Utc),
                        Description = "Модуль Продажи",
                        Title = "Продажи"
                    },
                    new
                    {
                        Id = new Guid("00000000-0000-0000-0000-000000010004"),
                        Code = "purchasing",
                        CreatedAtUtc = new DateTime(2024, 1, 1, 0, 0, 0, DateTimeKind.Utc),
                        Description = "Модуль Закупки",
                        Title = "Закупки"
                    },
                    new
                    {
                        Id = new Guid("00000000-0000-0000-0000-000000010005"),
                        Code = "hr",
                        CreatedAtUtc = new DateTime(2024, 1, 1, 0, 0, 0, DateTimeKind.Utc),
                        Description = "Модуль Кадры",
                        Title = "Кадры"
                    },
                    new
                    {
                        Id = new Guid("00000000-0000-0000-0000-000000010006"),
                        Code = "payroll",
                        CreatedAtUtc = new DateTime(2024, 1, 1, 0, 0, 0, DateTimeKind.Utc),
                        Description = "Модуль Зарплата",
                        Title = "Зарплата"
                    },
                    new
                    {
                        Id = new Guid("00000000-0000-0000-0000-000000010007"),
                        Code = "production",
                        CreatedAtUtc = new DateTime(2024, 1, 1, 0, 0, 0, DateTimeKind.Utc),
                        Description = "Модуль Производство",
                        Title = "Производство"
                    },
                    new
                    {
                        Id = new Guid("00000000-0000-0000-0000-000000010008"),
                        Code = "crm",
                        CreatedAtUtc = new DateTime(2024, 1, 1, 0, 0, 0, DateTimeKind.Utc),
                        Description = "Модуль CRM",
                        Title = "CRM"
                    },
                    new
                    {
                        Id = new Guid("00000000-0000-0000-0000-000000010009"),
                        Code = "catalogs",
                        CreatedAtUtc = new DateTime(2024, 1, 1, 0, 0, 0, DateTimeKind.Utc),
                        Description = "Модуль Справочники",
                        Title = "Справочники"
                    },
                    new
                    {
                        Id = new Guid("00000000-0000-0000-0000-000000010010"),
                        Code = "constants",
                        CreatedAtUtc = new DateTime(2024, 1, 1, 0, 0, 0, DateTimeKind.Utc),
                        Description = "Модуль НСИ и константы",
                        Title = "НСИ и константы"
                    },
                    new
                    {
                        Id = new Guid("00000000-0000-0000-0000-000000010011"),
                        Code = "exchange",
                        CreatedAtUtc = new DateTime(2024, 1, 1, 0, 0, 0, DateTimeKind.Utc),
                        Description = "Модуль Планы обмена",
                        Title = "Планы обмена"
                    },
                    new
                    {
                        Id = new Guid("00000000-0000-0000-0000-000000010012"),
                        Code = "reports",
                        CreatedAtUtc = new DateTime(2024, 1, 1, 0, 0, 0, DateTimeKind.Utc),
                        Description = "Модуль Отчёты",
                        Title = "Отчёты"
                    },
                    new
                    {
                        Id = new Guid("00000000-0000-0000-0000-000000010013"),
                        Code = "chesnyznak",
                        CreatedAtUtc = new DateTime(2024, 1, 1, 0, 0, 0, DateTimeKind.Utc),
                        Description = "Модуль Честный Знак",
                        Title = "Честный Знак"
                    });
            });
                b.HasData(
                    new
                    {
                        Id = new Guid("00000000-0000-0000-0000-000000010001"),
                        Code = "inventory",
                        CreatedAtUtc = new DateTime(2024, 1, 1, 0, 0, 0, DateTimeKind.Utc),
                        Description = "Модуль Склад",
                        Title = "Склад"
                    },
                    new
                    {
                        Id = new Guid("00000000-0000-0000-0000-000000010002"),
                        Code = "accounting",
                        CreatedAtUtc = new DateTime(2024, 1, 1, 0, 0, 0, DateTimeKind.Utc),
                        Description = "Модуль Бухгалтерия",
                        Title = "Бухгалтерия"
                    },
                    new
                    {
                        Id = new Guid("00000000-0000-0000-0000-000000010003"),
                        Code = "sales",
                        CreatedAtUtc = new DateTime(2024, 1, 1, 0, 0, 0, DateTimeKind.Utc),
                        Description = "Модуль Продажи",
                        Title = "Продажи"
                    },
                    new
                    {
                        Id = new Guid("00000000-0000-0000-0000-000000010004"),
                        Code = "purchasing",
                        CreatedAtUtc = new DateTime(2024, 1, 1, 0, 0, 0, DateTimeKind.Utc),
                        Description = "Модуль Закупки",
                        Title = "Закупки"
                    },
                    new
                    {
                        Id = new Guid("00000000-0000-0000-0000-000000010005"),
                        Code = "hr",
                        CreatedAtUtc = new DateTime(2024, 1, 1, 0, 0, 0, DateTimeKind.Utc),
                        Description = "Модуль Кадры",
                        Title = "Кадры"
                    },
                    new
                    {
                        Id = new Guid("00000000-0000-0000-0000-000000010006"),
                        Code = "payroll",
                        CreatedAtUtc = new DateTime(2024, 1, 1, 0, 0, 0, DateTimeKind.Utc),
                        Description = "Модуль Зарплата",
                        Title = "Зарплата"
                    },
                    new
                    {
                        Id = new Guid("00000000-0000-0000-0000-000000010007"),
                        Code = "production",
                        CreatedAtUtc = new DateTime(2024, 1, 1, 0, 0, 0, DateTimeKind.Utc),
                        Description = "Модуль Производство",
                        Title = "Производство"
                    },
                    new
                    {
                        Id = new Guid("00000000-0000-0000-0000-000000010008"),
                        Code = "crm",
                        CreatedAtUtc = new DateTime(2024, 1, 1, 0, 0, 0, DateTimeKind.Utc),
                        Description = "Модуль CRM",
                        Title = "CRM"
                    },
                    new
                    {
                        Id = new Guid("00000000-0000-0000-0000-000000010009"),
                        Code = "catalogs",
                        CreatedAtUtc = new DateTime(2024, 1, 1, 0, 0, 0, DateTimeKind.Utc),
                        Description = "Модуль Справочники",
                        Title = "Справочники"
                    },
                    new
                    {
                        Id = new Guid("00000000-0000-0000-0000-000000010010"),
                        Code = "constants",
                        CreatedAtUtc = new DateTime(2024, 1, 1, 0, 0, 0, DateTimeKind.Utc),
                        Description = "Модуль НСИ и константы",
                        Title = "НСИ и константы"
                    },
                    new
                    {
                        Id = new Guid("00000000-0000-0000-0000-000000010011"),
                        Code = "exchange",
                        CreatedAtUtc = new DateTime(2024, 1, 1, 0, 0, 0, DateTimeKind.Utc),
                        Description = "Модуль Планы обмена",
                        Title = "Планы обмена"
                    },
                    new
                    {
                        Id = new Guid("00000000-0000-0000-0000-000000010012"),
                        Code = "reports",
                        CreatedAtUtc = new DateTime(2024, 1, 1, 0, 0, 0, DateTimeKind.Utc),
                        Description = "Модуль Отчёты",
                        Title = "Отчёты"
                    },
                    new
                    {
                        Id = new Guid("00000000-0000-0000-0000-000000010013"),
                        Code = "chesnyznak",
                        CreatedAtUtc = new DateTime(2024, 1, 1, 0, 0, 0, DateTimeKind.Utc),
                        Description = "Модуль Честный Знак",
                        Title = "Честный Знак"
                    });
            });

            modelBuilder.Entity("UchetOnline.Domain.Entities.PayrollDocument", b =>
            {
                b.Property<Guid>("Id")
                    .HasColumnType("uuid");

                b.Property<byte[]>("ConcurrencyToken")
                    .IsConcurrencyToken()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("bytea");

                b.Property<DateTime>("CreatedAtUtc")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("Comment")
                    .IsRequired()
                    .HasMaxLength(256)
                    .HasColumnType("character varying(256)");

                b.Property<Guid>("EmployeeId")
                    .HasColumnType("uuid");

                b.Property<decimal>("GrossAmount")
                    .HasPrecision(18, 2)
                    .HasColumnType("numeric(18,2)");

                b.Property<decimal>("NetAmount")
                    .HasPrecision(18, 2)
                    .HasColumnType("numeric(18,2)");

                b.Property<DateTime>("Period")
                    .HasColumnType("timestamp with time zone");

                b.Property<int>("Status")
                    .HasColumnType("integer");

                b.Property<DateTime?>("UpdatedAtUtc")
                    .HasColumnType("timestamp with time zone");

                b.HasKey("Id");

                b.HasIndex("EmployeeId");

                b.ToTable("PayrollDocuments");
            });

            modelBuilder.Entity("UchetOnline.Domain.Entities.ProductionOperation", b =>
            {
                b.Property<Guid>("Id")
                    .HasColumnType("uuid");

                b.Property<byte[]>("ConcurrencyToken")
                    .IsConcurrencyToken()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("bytea");

                b.Property<DateTime?>("CompletedAtUtc")
                    .HasColumnType("timestamp with time zone");

                b.Property<DateTime>("CreatedAtUtc")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("OperationName")
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasColumnType("character varying(128)");

                b.Property<Guid>("ProductionOrderId")
                    .HasColumnType("uuid");

                b.Property<Guid?>("ResponsibleEmployeeId")
                    .HasColumnType("uuid");

                b.Property<DateTime?>("UpdatedAtUtc")
                    .HasColumnType("timestamp with time zone");

                b.HasKey("Id");

                b.HasIndex("ProductionOrderId");

                b.HasIndex("ResponsibleEmployeeId");

                b.ToTable("ProductionOperations");
            });

            modelBuilder.Entity("UchetOnline.Domain.Entities.ProductionOrder", b =>
            {
                b.Property<Guid>("Id")
                    .HasColumnType("uuid");

                b.Property<byte[]>("ConcurrencyToken")
                    .IsConcurrencyToken()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("bytea");

                b.Property<DateTime>("CreatedAtUtc")
                    .HasColumnType("timestamp with time zone");

                b.Property<DateTime?>("PlannedFinish")
                    .HasColumnType("timestamp with time zone");

                b.Property<DateTime>("PlannedStart")
                    .HasColumnType("timestamp with time zone");

                b.Property<int>("Status")
                    .HasColumnType("integer");

                b.Property<string>("ProductName")
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasColumnType("character varying(128)");

                b.Property<DateTime?>("UpdatedAtUtc")
                    .HasColumnType("timestamp with time zone");

                b.HasKey("Id");

                b.ToTable("ProductionOrders");
            });

            modelBuilder.Entity("UchetOnline.Domain.Entities.PurchaseOrder", b =>
            {
                b.Property<Guid>("Id")
                    .HasColumnType("uuid");

                b.Property<byte[]>("ConcurrencyToken")
                    .IsConcurrencyToken()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("bytea");

                b.Property<DateTime>("CreatedAtUtc")
                    .HasColumnType("timestamp with time zone");

                b.Property<DateTime>("OrderDateUtc")
                    .HasColumnType("timestamp with time zone");

                b.Property<int>("Status")
                    .HasColumnType("integer");

                b.Property<string>("SupplierName")
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasColumnType("character varying(128)");

                b.Property<DateTime?>("UpdatedAtUtc")
                    .HasColumnType("timestamp with time zone");

                b.HasKey("Id");

                b.ToTable("PurchaseOrders");
            });

            modelBuilder.Entity("UchetOnline.Domain.Entities.PurchaseOrderLine", b =>
            {
                b.Property<Guid>("Id")
                    .HasColumnType("uuid");

                b.Property<Guid>("CatalogItemId")
                    .HasColumnType("uuid");

                b.Property<byte[]>("ConcurrencyToken")
                    .IsConcurrencyToken()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("bytea");

                b.Property<DateTime>("CreatedAtUtc")
                    .HasColumnType("timestamp with time zone");

                b.Property<decimal>("Price")
                    .HasPrecision(18, 2)
                    .HasColumnType("numeric(18,2)");

                b.Property<Guid>("PurchaseOrderId")
                    .HasColumnType("uuid");

                b.Property<decimal>("Quantity")
                    .HasPrecision(18, 2)
                    .HasColumnType("numeric(18,2)");

                b.Property<DateTime?>("UpdatedAtUtc")
                    .HasColumnType("timestamp with time zone");

                b.HasKey("Id");

                b.HasIndex("CatalogItemId");

                b.HasIndex("PurchaseOrderId");

                b.ToTable("PurchaseOrderLines");
            });

            modelBuilder.Entity("UchetOnline.Domain.Entities.ReportDefinition", b =>
            {
                b.Property<Guid>("Id")
                    .HasColumnType("uuid");

                b.Property<string>("Code")
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasColumnType("character varying(128)");

                b.Property<byte[]>("ConcurrencyToken")
                    .IsConcurrencyToken()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("bytea");

                b.Property<DateTime>("CreatedAtUtc")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("Description")
                    .IsRequired()
                    .HasMaxLength(512)
                    .HasColumnType("character varying(512)");

                b.Property<string>("Query")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("Title")
                    .IsRequired()
                    .HasMaxLength(256)
                    .HasColumnType("character varying(256)");

                b.Property<DateTime?>("UpdatedAtUtc")
                    .HasColumnType("timestamp with time zone");

                b.HasKey("Id");

                b.ToTable("ReportDefinitions");
            });

            modelBuilder.Entity("UchetOnline.Domain.Entities.Role", b =>
            {
                b.Property<Guid>("Id")
                    .HasColumnType("uuid");

                b.Property<string>("Code")
                    .IsRequired()
                    .HasMaxLength(64)
                    .HasColumnType("character varying(64)");

                b.Property<byte[]>("ConcurrencyToken")
                    .IsConcurrencyToken()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("bytea");

                b.Property<DateTime>("CreatedAtUtc")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("Title")
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasColumnType("character varying(128)");

                b.Property<DateTime?>("UpdatedAtUtc")
                    .HasColumnType("timestamp with time zone");

                b.HasKey("Id");

                b.HasIndex("Code")
                    .IsUnique();

                b.ToTable("Roles");

                b.HasData(
                    new
                    {
                        Id = new Guid("00000000-0000-0000-0000-000000000001"),
                        Code = "admin",
                        CreatedAtUtc = new DateTime(2024, 1, 1, 0, 0, 0, DateTimeKind.Utc),
                        Title = "Администратор"
                    },
                    new
                    {
                        Id = new Guid("00000000-0000-0000-0000-000000000002"),
                        Code = "manager",
                        CreatedAtUtc = new DateTime(2024, 1, 1, 0, 0, 0, DateTimeKind.Utc),
                        Title = "Менеджер"
                    },
                    new
                    {
                        Id = new Guid("00000000-0000-0000-0000-000000000003"),
                        Code = "accountant",
                        CreatedAtUtc = new DateTime(2024, 1, 1, 0, 0, 0, DateTimeKind.Utc),
                        Title = "Бухгалтер"
                    });
            });

            modelBuilder.Entity("UchetOnline.Domain.Entities.SalesOrder", b =>
            {
                b.Property<Guid>("Id")
                    .HasColumnType("uuid");

                b.Property<byte[]>("ConcurrencyToken")
                    .IsConcurrencyToken()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("bytea");

                b.Property<string>("CustomerName")
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasColumnType("character varying(128)");

                b.Property<DateTime>("CreatedAtUtc")
                    .HasColumnType("timestamp with time zone");

                b.Property<DateTime>("OrderDateUtc")
                    .HasColumnType("timestamp with time zone");

                b.Property<int>("Status")
                    .HasColumnType("integer");

                b.Property<DateTime?>("UpdatedAtUtc")
                    .HasColumnType("timestamp with time zone");

                b.HasKey("Id");

                b.ToTable("SalesOrders");
            });

            modelBuilder.Entity("UchetOnline.Domain.Entities.SalesOrderLine", b =>
            {
                b.Property<Guid>("Id")
                    .HasColumnType("uuid");

                b.Property<byte[]>("ConcurrencyToken")
                    .IsConcurrencyToken()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("bytea");

                b.Property<DateTime>("CreatedAtUtc")
                    .HasColumnType("timestamp with time zone");

                b.Property<decimal>("DiscountPercent")
                    .HasPrecision(18, 2)
                    .HasColumnType("numeric(18,2)");

                b.Property<Guid>("InventoryItemId")
                    .HasColumnType("uuid");

                b.Property<decimal>("Price")
                    .HasPrecision(18, 2)
                    .HasColumnType("numeric(18,2)");

                b.Property<Guid>("SalesOrderId")
                    .HasColumnType("uuid");

                b.Property<decimal>("Quantity")
                    .HasPrecision(18, 2)
                    .HasColumnType("numeric(18,2)");

                b.Property<DateTime?>("UpdatedAtUtc")
                    .HasColumnType("timestamp with time zone");

                b.HasKey("Id");

                b.HasIndex("InventoryItemId");

                b.HasIndex("SalesOrderId");

                b.ToTable("SalesOrderLines");
            });

            modelBuilder.Entity("UchetOnline.Domain.Entities.User", b =>
            {
                b.Property<Guid>("Id")
                    .HasColumnType("uuid");

                b.Property<byte[]>("ConcurrencyToken")
                    .IsConcurrencyToken()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("bytea");

                b.Property<DateTime>("CreatedAtUtc")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("DisplayName")
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasColumnType("character varying(128)");

                b.Property<bool>("IsActive")
                    .HasColumnType("boolean");

                b.Property<string>("PasswordHash")
                    .IsRequired()
                    .HasMaxLength(512)
                    .HasColumnType("character varying(512)");

                b.Property<DateTime?>("UpdatedAtUtc")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("UserName")
                    .IsRequired()
                    .HasMaxLength(64)
                    .HasColumnType("character varying(64)");

                b.HasKey("Id");

                b.HasIndex("UserName")
                    .IsUnique();

                b.ToTable("Users");
            });

            modelBuilder.Entity("UchetOnline.Domain.Entities.Warehouse", b =>
            {
                b.Property<Guid>("Id")
                    .HasColumnType("uuid");

                b.Property<string>("Address")
                    .IsRequired()
                    .HasMaxLength(256)
                    .HasColumnType("character varying(256)");

                b.Property<byte[]>("ConcurrencyToken")
                    .IsConcurrencyToken()
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("bytea");

                b.Property<DateTime>("CreatedAtUtc")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasColumnType("character varying(128)");

                b.Property<DateTime?>("UpdatedAtUtc")
                    .HasColumnType("timestamp with time zone");

                b.HasKey("Id");

                b.ToTable("Warehouses");
            });

            modelBuilder.Entity("UchetOnline.Domain.Entities.UserRole", b =>
            {
                b.Property<Guid>("UserId")
                    .HasColumnType("uuid");

                b.Property<Guid>("RoleId")
                    .HasColumnType("uuid");

                b.HasKey("UserId", "RoleId");

                b.HasIndex("RoleId");

                b.ToTable("UserRoles");
            });

            modelBuilder.Entity("UchetOnline.Domain.Entities.InventoryItem", b =>
            {
                b.HasOne("UchetOnline.Domain.Entities.CatalogItem", "CatalogItem")
                    .WithMany("InventoryItems")
                    .HasForeignKey("CatalogItemId");

                b.HasOne("UchetOnline.Domain.Entities.Warehouse", "Warehouse")
                    .WithMany("Items")
                    .HasForeignKey("WarehouseId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("CatalogItem");

                b.Navigation("Warehouse");
            });

            modelBuilder.Entity("UchetOnline.Domain.Entities.InventoryTransaction", b =>
            {
                b.HasOne("UchetOnline.Domain.Entities.InventoryItem", "InventoryItem")
                    .WithMany()
                    .HasForeignKey("InventoryItemId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("InventoryItem");
            });

            modelBuilder.Entity("UchetOnline.Domain.Entities.CrmLead", b =>
            {
                b.HasOne("UchetOnline.Domain.Entities.Employee", "ResponsibleEmployee")
                    .WithMany()
                    .HasForeignKey("ResponsibleEmployeeId")
                    .OnDelete(DeleteBehavior.Restrict);

                b.Navigation("ResponsibleEmployee");
            });

            modelBuilder.Entity("UchetOnline.Domain.Entities.PayrollDocument", b =>
            {
                b.HasOne("UchetOnline.Domain.Entities.Employee", "Employee")
                    .WithMany("PayrollDocuments")
                    .HasForeignKey("EmployeeId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Employee");
            });

            modelBuilder.Entity("UchetOnline.Domain.Entities.ProductionOperation", b =>
            {
                b.HasOne("UchetOnline.Domain.Entities.ProductionOrder", "ProductionOrder")
                    .WithMany("Operations")
                    .HasForeignKey("ProductionOrderId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("UchetOnline.Domain.Entities.Employee", "ResponsibleEmployee")
                    .WithMany()
                    .HasForeignKey("ResponsibleEmployeeId")
                    .OnDelete(DeleteBehavior.Restrict);

                b.Navigation("ProductionOrder");

                b.Navigation("ResponsibleEmployee");
            });

            modelBuilder.Entity("UchetOnline.Domain.Entities.PurchaseOrderLine", b =>
            {
                b.HasOne("UchetOnline.Domain.Entities.CatalogItem", "CatalogItem")
                    .WithMany("PurchaseLines")
                    .HasForeignKey("CatalogItemId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("UchetOnline.Domain.Entities.PurchaseOrder", "PurchaseOrder")
                    .WithMany("Lines")
                    .HasForeignKey("PurchaseOrderId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("CatalogItem");

                b.Navigation("PurchaseOrder");
            });

            modelBuilder.Entity("UchetOnline.Domain.Entities.SalesOrderLine", b =>
            {
                b.HasOne("UchetOnline.Domain.Entities.InventoryItem", "InventoryItem")
                    .WithMany()
                    .HasForeignKey("InventoryItemId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("UchetOnline.Domain.Entities.SalesOrder", "SalesOrder")
                    .WithMany("Lines")
                    .HasForeignKey("SalesOrderId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("InventoryItem");

                b.Navigation("SalesOrder");
            });

            modelBuilder.Entity("UchetOnline.Domain.Entities.UserRole", b =>
            {
                b.HasOne("UchetOnline.Domain.Entities.Role", "Role")
                    .WithMany("UserRoles")
                    .HasForeignKey("RoleId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("UchetOnline.Domain.Entities.User", "User")
                    .WithMany("UserRoles")
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Role");

                b.Navigation("User");
            });

            modelBuilder.Entity("UchetOnline.Domain.Entities.CatalogItem", b =>
            {
                b.Navigation("InventoryItems");

                b.Navigation("PurchaseLines");
            });

            modelBuilder.Entity("UchetOnline.Domain.Entities.Employee", b =>
            {
                b.Navigation("PayrollDocuments");
            });

            modelBuilder.Entity("UchetOnline.Domain.Entities.ProductionOrder", b =>
            {
                b.Navigation("Operations");
            });

            modelBuilder.Entity("UchetOnline.Domain.Entities.PurchaseOrder", b =>
            {
                b.Navigation("Lines");
            });

            modelBuilder.Entity("UchetOnline.Domain.Entities.SalesOrder", b =>
            {
                b.Navigation("Lines");
            });

            modelBuilder.Entity("UchetOnline.Domain.Entities.Role", b =>
            {
                b.Navigation("UserRoles");
            });

            modelBuilder.Entity("UchetOnline.Domain.Entities.User", b =>
            {
                b.Navigation("UserRoles");
            });

            modelBuilder.Entity("UchetOnline.Domain.Entities.Warehouse", b =>
            {
                b.Navigation("Items");
            });
#pragma warning restore 612, 618
        }
    }
}
